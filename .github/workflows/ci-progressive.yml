name: Progressive CI Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  NODE_ENV: ci

jobs:
  # Component Detection Job
  detect-components:
    name: Detect Available Components
    runs-on: windows-latest
    outputs:
      has_rust: ${{ steps.detect.outputs.has_rust }}
      has_data_crate: ${{ steps.detect.outputs.has_data_crate }}
      has_frontend: ${{ steps.detect.outputs.has_frontend }}
      has_python: ${{ steps.detect.outputs.has_python }}
      has_algorithms: ${{ steps.detect.outputs.has_algorithms }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Detect Components
      id: detect
      shell: pwsh
      run: |
        # Detect Rust workspace
        $hasRust = Test-Path "Cargo.toml"
        echo "has_rust=$($hasRust.ToString().ToLower())" >> $env:GITHUB_OUTPUT
        
        # Detect data crate (Epic 2)
        $hasDataCrate = Test-Path "crates/backtestr-data/src/lib.rs"
        echo "has_data_crate=$($hasDataCrate.ToString().ToLower())" >> $env:GITHUB_OUTPUT
        
        # Detect frontend (Epic 5)
        $hasFrontend = (Test-Path "electron/renderer/package.json") -and (Test-Path "electron/renderer/src")
        echo "has_frontend=$($hasFrontend.ToString().ToLower())" >> $env:GITHUB_OUTPUT
        
        # Detect Python setup (Epic 4)
        $hasPython = Test-Path "algorithms/requirements.txt"
        echo "has_python=$($hasPython.ToString().ToLower())" >> $env:GITHUB_OUTPUT
        
        # Detect actual algorithms
        $hasAlgorithms = (Get-ChildItem -Path "algorithms" -Filter "*.py" -Recurse -ErrorAction SilentlyContinue).Count -gt 0
        echo "has_algorithms=$($hasAlgorithms.ToString().ToLower())" >> $env:GITHUB_OUTPUT
        
        # Summary output
        Write-Host "========================================="
        Write-Host "Component Detection Results:"
        Write-Host "Rust Workspace: $hasRust"
        Write-Host "Data Crate: $hasDataCrate"
        Write-Host "Frontend: $hasFrontend"
        Write-Host "Python Setup: $hasPython"
        Write-Host "Algorithms: $hasAlgorithms"
        Write-Host "========================================="

  # Foundation Checks (Always Run)
  foundation:
    name: Foundation Validation
    runs-on: windows-latest
    needs: detect-components
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Project Structure
      shell: pwsh
      run: |
        $requiredDirs = @("crates", "electron", "algorithms", "scripts", "data", "docs")
        $missingDirs = @()
        
        foreach ($dir in $requiredDirs) {
          if (Test-Path $dir) {
            Write-Host "✓ $dir directory exists"
          } else {
            $missingDirs += $dir
          }
        }
        
        if ($missingDirs.Count -gt 0) {
          Write-Host "❌ Missing directories: $($missingDirs -join ', ')"
          exit 1
        }
        
        Write-Host "✓ All required directories present"
    
    - name: Validate Configuration Files
      shell: pwsh
      run: |
        $requiredFiles = @(
          "Cargo.toml",
          "package.json", 
          ".gitignore",
          "README.md"
        )
        
        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            Write-Host "✓ $file exists"
          } else {
            Write-Host "❌ Missing: $file"
            exit 1
          }
        }

  # Rust Checks (Epic 1-3)
  rust:
    name: Rust Validation
    runs-on: windows-latest
    needs: [detect-components, foundation]
    if: needs.detect-components.outputs.has_rust == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Format Check
      run: cargo fmt --all -- --check
    
    - name: Clippy Analysis
      run: cargo clippy --all-targets --all-features -- -D warnings
      continue-on-error: ${{ github.event_name == 'pull_request' && github.base_ref != 'main' }}
    
    - name: Build Core Components
      run: cargo build --workspace --all-features
    
    - name: Run Core Tests
      run: cargo test --workspace
      
    - name: Data Crate Tests
      if: needs.detect-components.outputs.has_data_crate == 'true'
      run: |
        cargo test -p backtestr-data --all-features
        Write-Host "✓ Data pipeline tests passed"

  # Frontend Checks (Epic 5-6)
  frontend:
    name: Frontend Validation
    runs-on: windows-latest
    needs: [detect-components, foundation]
    if: needs.detect-components.outputs.has_frontend == 'true'
    continue-on-error: true  # Non-blocking until Epic 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install Dependencies
      run: |
        pnpm install
        cd electron/renderer
        pnpm install
    
    - name: TypeScript Check
      run: |
        cd electron/renderer
        pnpm run typecheck || exit 0  # Non-blocking
    
    - name: Linting
      run: |
        cd electron/renderer
        pnpm run lint || exit 0  # Non-blocking
    
    - name: Build Frontend
      run: |
        cd electron/renderer
        pnpm run build || exit 0  # Non-blocking

  # Python Checks (Epic 4)
  python:
    name: Python Validation
    runs-on: windows-latest
    needs: [detect-components, foundation]
    if: needs.detect-components.outputs.has_python == 'true'
    continue-on-error: true  # Non-blocking until Epic 4
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if (Test-Path algorithms/requirements.txt) {
          pip install -r algorithms/requirements.txt
        }
        pip install pytest ruff black isort
    
    - name: Python Linting
      if: needs.detect-components.outputs.has_algorithms == 'true'
      run: |
        ruff check algorithms/ || exit 0  # Non-blocking
        black --check algorithms/ || exit 0  # Non-blocking
    
    - name: Python Tests
      if: needs.detect-components.outputs.has_algorithms == 'true'
      run: |
        if (Test-Path algorithms/tests) {
          pytest algorithms/tests/ -v || exit 0  # Non-blocking
        }

  # Integration Checks (When multiple components exist)
  integration:
    name: Integration Validation
    runs-on: windows-latest
    needs: [detect-components, rust]
    if: |
      always() &&
      needs.rust.result == 'success' &&
      (needs.detect-components.outputs.has_data_crate == 'true' ||
       needs.detect-components.outputs.has_frontend == 'true')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Build Environment
      uses: dtolnay/rust-toolchain@stable
    
    - name: Integration Build
      run: |
        Write-Host "Building integrated components..."
        cargo build --release --workspace
    
    - name: IPC Communication Test
      if: needs.detect-components.outputs.has_frontend == 'true'
      run: |
        # Test IPC between Rust and Electron when both exist
        cargo test -p backtestr-ipc || exit 0

  # Summary Report
  ci-summary:
    name: CI Summary
    runs-on: windows-latest
    needs: [detect-components, foundation, rust, frontend, python, integration]
    if: always()
    
    steps:
    - name: Generate Summary Report
      shell: pwsh
      run: |
        Write-Host "========================================="
        Write-Host "CI Pipeline Summary"
        Write-Host "========================================="
        
        # Check job results
        $foundationStatus = "${{ needs.foundation.result }}"
        $rustStatus = "${{ needs.rust.result }}"
        $frontendStatus = "${{ needs.frontend.result }}"
        $pythonStatus = "${{ needs.python.result }}"
        $integrationStatus = "${{ needs.integration.result }}"
        
        Write-Host "Foundation: $foundationStatus $(if ($foundationStatus -eq 'success') {'✓'} else {'❌'})"
        Write-Host "Rust Core: $rustStatus $(if ($rustStatus -eq 'success' -or $rustStatus -eq 'skipped') {'✓'} else {'❌'})"
        Write-Host "Frontend: $frontendStatus $(if ($frontendStatus -ne 'failure') {'✓'} else {'⚠️'}) [Non-blocking]"
        Write-Host "Python: $pythonStatus $(if ($pythonStatus -ne 'failure') {'✓'} else {'⚠️'}) [Non-blocking]"
        Write-Host "Integration: $integrationStatus $(if ($integrationStatus -eq 'success' -or $integrationStatus -eq 'skipped') {'✓'} else {'⚠️'})"
        
        # Determine overall status
        $requiredPassed = ($foundationStatus -eq 'success') -and 
                         ($rustStatus -eq 'success' -or $rustStatus -eq 'skipped')
        
        if ($requiredPassed) {
          Write-Host "`n✅ OVERALL: PASS - Required checks successful"
          exit 0
        } else {
          Write-Host "`n❌ OVERALL: FAIL - Required checks failed"
          exit 1
        }