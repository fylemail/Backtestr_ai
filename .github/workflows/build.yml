name: Full Build and Test (Optional)

on:
  push:
    branches: [ main, master ]
  # Disabled for PRs - using Progressive CI instead
  # pull_request:
  #   branches: [ main, master, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  NODE_ENV: ci

jobs:
  # Rust build and test job
  rust:
    name: Rust Build and Test
    runs-on: windows-latest
    strategy:
      matrix:
        rust: [stable, 1.75.0]
        target: [x86_64-pc-windows-msvc]
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      continue-on-error: true
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      continue-on-error: true
    
    - name: Build
      run: cargo build --all --verbose
      continue-on-error: true
    
    - name: Run tests
      run: cargo test --all --verbose
      continue-on-error: true
    
    - name: Build release
      run: cargo build --all --release --verbose
      continue-on-error: true

  # Node.js build and test job
  node:
    name: Node.js Build and Test
    runs-on: windows-latest
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install
    
    - name: TypeScript type check
      run: |
        cd electron/renderer
        pnpm run typecheck
    
    - name: Run linter
      run: pnpm run lint:js || true
    
    - name: Run tests
      run: pnpm test:js || true
    
    - name: Build frontend
      run: |
        cd electron/renderer
        pnpm run build

  # Python tests job
  python:
    name: Python Tests
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov ruff black isort
        if (Test-Path requirements.txt) { pip install -r requirements.txt }
    
    - name: Run linter
      run: |
        ruff check algorithms/ || true
        black --check algorithms/ || true
        isort --check-only algorithms/ || true
    
    - name: Run tests
      run: |
        if (Test-Path algorithms/tests) { pytest algorithms/tests/ -v || true }

  # Integration build job
  integration:
    name: Integration Build
    runs-on: windows-latest
    needs: [rust, node, python]
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Full build
      run: |
        cargo build --all --release
        pnpm install
        cd electron/renderer
        pnpm run build
      continue-on-error: true
    
    - name: Upload Rust artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rust-binaries-${{ github.sha }}
        path: |
          target/release/*.exe
          target/release/*.dll
    
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build-${{ github.sha }}
        path: electron/renderer/dist/

  # ARM64 build job (optional)
  arm64:
    name: ARM64 Build
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust for ARM64
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: aarch64-pc-windows-msvc
    
    - name: Build for ARM64
      run: cargo build --all --release --target aarch64-pc-windows-msvc
    
    - name: Upload ARM64 artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rust-binaries-arm64-${{ github.sha }}
        path: target/aarch64-pc-windows-msvc/release/*.exe